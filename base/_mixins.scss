// /**
//  * Copyright (C) 2013 Crossing Hippos - Babs GÃ¶sgens. All rights reserved.
//  * Licensed under GNU General Public License version 2 or later; see LICENSE.txt
//  */

@mixin column-behavior($reset-box-model: $reset-box-model, $column-float: $column-float)
{
	@if $column-float {
		display: block;
		float: left;
		@if $negative-right-margin != 0 {
			margin-right: $negative-right-margin !important;
		}
	}
	@else {
		display: inline-block;
	}

	@if $reset-box-model==true {
		@include box-sizing('border-box');
	}

	vertical-align: top;
	height: auto;
}

@mixin column-width($fraction: $base-column-width, $persistent: false) {
	@if $persistent {
		width: fraction-to-percentage($fraction) !important;
	}
	@else {
		width: fraction-to-percentage($fraction);
	}

	// Remove negative margin on elements that span full width of their container
	@if $column-float {
		@if $negative-right-margin != 0 {
			@if $fraction == 1/1 {
				margin-right: 0;
			}
		}
	}
}

@mixin parent-behavior()
{
	padding-left: 0;
	padding-right: 0;
}

// Helper mixin for positioning
// Expects a fraction as unit
@mixin move($fraction) {
	position: relative;
	left: fraction-to-percentage($fraction);
}

// Fixes content width and centers in viewport.
// @todo: make configurable so content can be rendered flush left or right
@mixin root($container-max-width: $container-max-width) {
	display: block;
	margin: 0 auto;
	max-width: $container-max-width;
}

// Mixin to reverse padding on a container
// Is sometimes helpful for nested columns
// Avoid using this if at all possible, can cause some erratic behavior
@mixin bleed()
{
	margin-left: $column-spacing / -2;
	margin-right: $column-spacing / -2;
}

// Mixin column margins
// Uses padding by default, can be overridden to use margins instead - helpful when assigning backgrounds
@mixin column-spacing($fraction: 1/2, $use-margin: false)
{
	@if ($use-margin) {
		margin-left: horizontal-rhythm($fraction);
		margin-right: horizontal-rhythm($fraction);
	}
	@else {
		padding-left: horizontal-rhythm($fraction);
		padding-right: horizontal-rhythm($fraction);
	}
}

// Shorthand mixin for column
// Combines above functions
// Behavior can be overridden by (temporarily re-assigning values)
@mixin column($fraction: 1/1, $persistent: false, $column-padding: 1/2, $column-margin: 0)
{
	@include column-behavior();
	@include column-width($fraction, $persistent);

	@if $column-padding {
		@include column-spacing($column-padding);			
	}

	@if $column-padding {
		@include column-spacing($column-margin);			
	}
}