// /**
//  * Copyright (C) 2013 Crossing Hippos - Babs GÃ¶sgens. All rights reserved.
//  * Licensed under GNU General Public License version 2 or later; see LICENSE.txt
//  */


	// Placeholder mixin
	// See: Helpers/mixins/module.scss
	@mixin button-padding($padding: $button-padding) {
		@include module-padding($button-padding);
	}

	// Placeholder mixin
	// See: Helpers/mixins/module.scss
	@mixin button-border($border: $button-border) {
		@include module-border($border)
	}

	// Expects a list in the format background-color, background-image
	// Use false if a value should not be rendered
	// To do: complete for other background properties;
	@mixin button-background($background: $button-background) {

		$background-color: nth($background,1);
		$background-image: nth($background,2);

		@if $background-color {
			background-color: $background-color;
		}
		@if $background-image {
			@include background-image($background-image);
		}
	}

	// Placeholder mixin
	// See: Helpers/mixins/module.scss
	@mixin button-text($text: $button-text) {

		@include module-text($text);

		$text-color: nth($text,1);

		// Buttons are often anchor links, visited links also need to be set;
		@if $text-color {
			&:hover,
			&:active,
			&:visited {
				color: $text-color;
			}
		}
	}

	// Expects a (list of) valid shadow notation(s) or false if no shadow should be rendered
	@mixin button-shadow($shadow: $button-shadow) {
		@if $shadow {
			@include box-shadow($shadow);
		}
	}

	// Expects a nested list in the format ($button-type-style, $button-type-variant, $button-type-weight, $button-type-family), $button-type-size, $button-type-leading
	// The mixin will check if values are different from the base class and if so add them
	// Equal values will be ignored to keep CSS as small as possible
	@mixin button-type($type: $button-type) {

		$type-size: nth($type,2);
		$type-leading: nth($type,3);

		$type: nth($type,1);

		$type-style:   nth($type,1);
		$type-variant: nth($type,2);
		$type-weight:  nth($type,3);
		$type-family:  nth($type,4);

		@if $type-style != $type-style {
			@include font-style($type-style);
		}
		@if $type-variant != $type-variant {
			@include font-variant($type-variant);
		}
		@if $type-weight != $type-weight {
			@include font-weight($type-weight);
		}
		@if $type-family != $type-family {
			@include font-family($type-family);
		}
		@if $type-size != $font-size {
			@include adjust-font-size-to($type-size);
		}
		@if $type-leading != $line-height {
			@include adjust-leading-to($type-leading, $type-size);
		}
	}

	// Expects a nested array
	// This mixin will compare each value and will only render if it is different from the base value
	@mixin button($text, $border, $background, $shadow) {

		// Compare text values
		$text-color 	: nth($text,1);
		$text-shadow 	: nth($text,2);
		$text-align 	: nth($text,3);

		@if $text-color == $button-text-color {
			$text-color: false;
		}
		@if $text-shadow == $button-text-shadow {
			$text-shadow: false;
		}
		@if $text-align == $button-text-align {
			$text-align: false;
		}
		@include button-text(($text-color, $text-shadow, $text-align));

		// Compare border values
		@if $border {

			// Extract the individual variables from the list
			$border-radius: nth($border,2);
			$border: nth($border,1);

			$border-width: nth($border,1);
			$border-style: nth($border,2);
			$border-color: nth($border,3);

			@if $border-radius == $button-border-radius {
				$border-radius: false;
			}
			@if $border == $button-border {
				$border: false;
			}

			$shorthand: true;
			@if $border-width == $button-border-width {
				$border-width: false;
			}
			@if $border-style == $button-border-style {
				$border-style: false;
			}
			@if $border-color == $button-border-color {
				$border-color: false;
			}
			@include button-border((($border-width,$border-style,$border-color), $border-radius));
		}

		// Compare background values
		$background-color: nth($background,1);
		$background-image: nth($background,2);

		// @debug $background-image==$button-background-image;

		$shorthand: true;
		@if $background-color==$button-background-color {
			// $background-color: false;
			// $shorthand: false;
		}
		@if $background-image==$button-background-image {
			// $background-image: false;
			// $shorthand: false;
		}

		@if $shorthand {
			@debug "Using shorthand";
			@include button-background(($background-color, $background-image));
		}
		@else {
			@if $background-color {
				@debug "Just printing color";
				background-color: $background-color;			
			}
			@if $background-image {
				@debug "Just printing image";
				background-image: $background-image;			
			}
		}

		// Compare shadow values
		@if $shadow != $button-shadow {
			@include button-shadow($shadow);
		}
	}