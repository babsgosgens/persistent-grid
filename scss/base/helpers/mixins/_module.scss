// /**
//  * Copyright (C) 2013 Crossing Hippos - Babs GÃ¶sgens. All rights reserved.
//  * Licensed under GNU General Public License version 2 or later; see LICENSE.txt
//  */
@if $trace-imports { @debug 'imported'; }


	// **
	// Mixin button paddings
	// @param An array of 1 or 4 padding values
	// @param Optional: a side property (top-padding, right-padding, bottom-padding or left-padding)
	// **
	@mixin module-padding($padding, $property: padding)
	{
		$length: length($padding);

		// **
		// Only accepts a single value, or
		// **
		@if $length==3 {
			@warn "Wrong value for first parameter: mixin accepts either a single value or an array of four values.";
		}


		@if $length==1 {
			@include side($padding, $property);
		}


		@if $length==4  {

			$compact: true;
			@each $value in $padding {
				@if $value==false {
					$compact: false;
				}
			}

			@if $compact {

				@if nth($padding, index($sides, top))==nth($padding, index($sides, bottom)) and nth($padding, index($sides, right))==nth($padding, index($sides, left)) {
					#{$property}: nth($padding,1) nth($padding,2);
				}
				@else {
					@include side($padding, $property);
				}
			}
			@else {
				@each $value in $padding {

					@if $value {

						$i: index($padding, $value);
						$side: padding-#{nth($sides,$i)};

						@include side($value, $side);
					}
				}
			}

		}
	}

	@mixin side($padding, $property: padding)
	{
		#{$property}: $padding;
	}

	// Expects a nested list in the format (border-width, border-style, border-color), border-radius
	// Use false if a value should not be rendered (0 is a valid value)
	@mixin module-border($border: 0, $border-collapse: true) {

		$border-width: nth($border,1);
		$border-style: nth($border,2);
		$border-color: nth($border,3);
		// $border-radius: nth($border,4);

		@if length($border-width)>1 or length($border-style)>1 or length($border-color)>1 {
			
			// Render individual border properties
			@if $border-width!=false {
				border-width: $border-width;
			}
			@if $border-style!=false {
				border-width: $border-style;
			}
			@if $border-color!=false {
				border-color: $border-color;
			}

		}
		@else {

			@if $border-width==false or $border-style==false or $border-color==false {

				// Render individual border properties
				@if $border-width!=false {
					border-width: $border-width;
				}
				@if $border-style!=false {
					border-style: $border-style;
				}
				@if $border-color!=false {
					border-color: $border-color;
				}
			}
			@else {
				border: $border-width $border-style $border-color;
			}

		}
		
		// // Render the rounded corners
		// @if $border-radius {
		// 	@include border-radius($border-radius);
		// }
	}

	// Expects an array of four values
	// Use false if a value should not be rendered (0 is a valid value)
	@mixin module-margin($margin) {

		// Extract the individual variables from the list
		$top:    nth($margin, 1);
		$right:  nth($margin, 2);
		$bottom: nth($margin, 3);
		$left:   nth($margin, 4);

		// Determine if we have all the values for shorthand notation
		$shorthand: true;
		@if $top==false    { $shorthand: false; }
		@if $right==false  { $shorthand: false; }
		@if $bottom==false { $shorthand: false; }
		@if $left==false   { $shorthand: false; }

		@if $shorthand {
			margin: $top $right $bottom $left;
		}
		@else {
			@if $top    { margin-top: $top; }
			@if $right  { margin-right: $right; }
			@if $bottom { margin-bottom: $bottom; }
			@if $left   { margin-left: $left; }
		}
	}

	// Expects a (list of) valid shadow notation(s) or false if no shadow should be rendered
	@mixin module-shadow($shadow) {
		@if $shadow {
			@include box-shadow($shadow);
		}
	}

	// Expects a list in the format of button-text-color, button-text-shadow, button-text-align;
	@mixin module-text($text) {

		$text-color: nth($text,1);
		$text-shadow: nth($text,2);
		$text-align: nth($text,3);

		@if $text-color {
			color: $text-color;
		}
		@if $text-shadow {
			@include text-shadow($text-shadow);
		}
		@if $text-align {
			text-align: $text-align;
		}
	}


	// Expects a nested list in the format ($button-type-style, $button-type-variant, $button-type-weight, $button-type-family), $button-type-size, $button-type-leading
	// The mixin will check if values are different from the base class and if so add them
	// Equal values will be ignored to keep CSS as small as possible
	@mixin module-type($type) {

		$type-size: nth($type,2);
		$type-leading: nth($type,3);

		$type: nth($type,1);

		@if extract-type-style($type) != extract-type-style($type-default) {
			@include font-style($type);
		}
		@if extract-type-variant($type) != extract-type-variant($type-default) {
			@include font-variant($type);
		}
		@if extract-type-weight($type) != extract-type-weight($type-default) {
			@include font-weight($type);
		}
		@if extract-type-family($type) != extract-type-family($type-default) {
			@include font-family($type);
		}

		// @if $type-size != $font-size {
		// 	@include adjust-font-size-to($type-size);
		// }
		// @if $type-leading != $line-height {
		// 	@include adjust-leading-to($type-leading/$base-line-height, $type-size);
		// }
	}
