@mixin debugBaseLine($selector: html)
{
	#{$selector} {
	/* Settings: $debug-rhythm=true; */
	$to: transparent;
	$from: rgba(226, 255, 255, .5);
	background-image: -webkit-linear-gradient($from 50%, $to 50%);
	background-image: linear-gradient($from 50%, $to 50%);
	background-size: rhythm(2) rhythm(2);
	* { /* Settings: $debug-rhythm=true; */ background-color: transparent !important; background-image: none !important; outline: rgba(255,0,255,.1) dotted 1px; outline: lighten( rgb(255,0,255), .1 ) dotted 1px \9; }
	}
}

@mixin embossDarkTextOnLightBackground($color: #fff)
{
	@include text-shadow(
		0 1px 0 lighten($color, 50),
		0 1px 1px lighten($color, 50)
	);
}
@mixin embossLightTextOnDarkBackground($color: #000)
{
	@include text-shadow(
		0 -1px 1px darken($color, 20),
		0 -1px 2px lighten($color, 50)
	);
}

// Placeholder mixin
@mixin unit($property, $target, $context:$target)
{
	@if $use-rem-for-sizing {
		@include rem($property, $target);
	}
	@else {
		@include em($property, $target, $context);
	}
}

@mixin rem($property, $pixels)
{
	#{$property}: $pixels;
	#{$property}: px-to-rem($pixels);
}

@mixin em($property,$target,$context)
{
	#{$property}: px-to-em($target,$context);
}

@mixin font-size($target,$context:$base-font-size)
{
	@include unit('font-size', $target, $context);
}

@mixin line-height($target,$context:$base-line-height)
{
	@include unit('line-height', $target, $context);
}

@mixin set-baseline()
{
	@if $use-rem-for-sizing {
		html {
			font-size: 62.5%; // Reset to 10px equivalent
			@include rem('line-height', $base-line-height);
		}
		body {
			@include font-size($base-font-size);
			@include line-height($base-line-height);
		}
	}
	@else {
		// @include establish-baseline($base-font-size);
	}
}

@mixin vertical-rhythm($lines: 1, $property: margin, $context: $base-font-size) 
{
	@include unit($property, base-line-rhythm($lines), $context);
}
@mixin tooltipTriangle($size: $base-font-size, $direction: down, $color: $color-theme)
{
	border: $size/2 solid transparent;
	display: inline-block;
	content: "";
	width: 0;
	height: 0;
	position: absolute;
	@if $direction == right {
		left: 100%;
		border-left-color: $color;
	}
	@if $direction == left {
		right: 100%;
		border-right-color: $color;
	}
	@if $direction == up {
		@include unit(top, $size/-2);
		border-bottom-color: $color;
	}
	@if $direction == down {
		top: 100%;
		border-top-color: $color;
	}

	@if $direction == up {
		left: 50%;
		margin-left: $size/-2;
	}
	@if $direction == down {
		left: 50%;
		margin-left: $size/-2;
	}
}
@mixin triangle($size: $base-font-size, $direction: right, $color: $color-theme, $where: after)
{
	position: relative;
	&:#{$where} {
		border: $size/2 solid transparent;
		// @include unit(border-width, $size/2);
		display: inline-block;
		content: "";
		width: 0;
		height: 0;
		position: absolute;
		@if $direction == right {
			left: 100%;
			border-left-color: $color;
		}
		@if $direction == left {
			right: 100%;
			border-right-color: $color;
		}
		@if $direction == up {
			@include unit(top, $size/-2);
			border-bottom-color: $color;
		}
		@if $direction == down {
			top: 100%;
			border-top-color: $color;
		}
	}
}

@mixin is-hidden {
	position: absolute;
	left: -9999em;
}
@mixin is-not-hidden {
	position: static;
}
@mixin is-visible($display: block) {
	display: $display;
}
@mixin is-not-visible {
	display: none;
}